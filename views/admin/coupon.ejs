<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Evara Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">  
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="/admin_assets/imgs/theme/favicon.svg">
    <!-- Template CSS -->
    <link href="/admin_assets/css/main.css" rel="stylesheet" type="text/css" />
    <style>
        /* Add custom styles for active sidebar items */
        .menu-aside .menu-item.active a {
            background-color: #333;
        }

        .menu-aside .menu-item.active a .icon {
            color: #fff;
        }

        .menu-aside .menu-item.active a .text {
            color: #fff;
        }
    </style>
</head>

<body>
    <!-- Header -->
    <header class="main-header navbar">
        <div class="col-search">
            <!-- Search form can be added here if needed -->
        </div>
        <div class="col-nav">
            <!-- Sidebar toggle button -->
            <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside">
                <i class="material-icons md-apps"></i>
            </button>
            <!-- User profile dropdown -->
            <ul class="nav">
                <!-- User notifications -->
                <li class="nav-item">
                    <a class="nav-link btn-icon" href="#">
                        <i class="material-icons md-notifications animation-shake"></i>
                        <span class="badge rounded-pill">3</span>
                    </a>
                </li>
                <!-- Fullscreen toggle -->
                <li class="nav-item">
                    <a href="#" class="requestfullscreen nav-link btn-icon">
                        <i class="material-icons md-cast"></i>
                    </a>
                </li>
                <!-- Language dropdown -->
                <li class="dropdown nav-item">
                    <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownLanguage" aria-expanded="false">
                        <i class="material-icons md-public"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                        <!-- Language options -->
                        <!-- Example: -->
                        <a class="dropdown-item text-brand" href="#"><img src="/admin_assets/imgs/theme/flag-us.png" alt="English">English</a>
                        <!-- Add more language options as needed -->
                    </div>
                </li>
                <!-- User profile dropdown -->
                <li class="dropdown nav-item">
                    <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount" aria-expanded="false">
                        <img class="img-xs rounded-circle" src="/admin_assets/imgs/people/avatar2.jpg" alt="User">
                    </a>
                    <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                        <!-- User profile options -->
                        <!-- Example: -->
                        <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit Profile</a>
                        <!-- Add more user profile options as needed -->
                    </div>
                </li>
            </ul>
        </div>
    </header>
    <!-- Sidebar -->
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="/admin_assets/imgs/theme/lensluxe.png" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admin/dashboard" onclick="highlightMenuItem(this)"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <!-- Customers link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/customer" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-people"></i>
                        <span class="text">Customers</span>
                    </a>
                </li>
                <!-- Categories link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-category"></i>
                        <span class="text">Categories</span>
                    </a>
                </li>
                <!-- Products link -->
                <li class="menu-item">
                    <a class="menu-link" href="/admin/product" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-shopping_basket"></i>
                        <span class="text">Products</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/order" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-store"></i>
                        <span class="text">Order</span>
                    </a>
                </li>
                <li class=>
                    <a class="menu-link" href="/admin/offer" onclick="highlightMenuItem(this)">
                        <i class="icon material-icons md-local_offer"></i>
                        <span class="text">Offer</span>
                    </a>
                </li>
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/coupon" onclick="highlightMenuItem(this)">
                        <i class="material-icons md-store"></i>

                        <span class="text">Coupon</span>
                    </a>
                </li>
                <li class="menu-item">
                    <a class="menu-link" href="/admin/salesreport" onclick="highlightMenuItem(this)">
                        <i class="material-icons md-store"></i>

                        <span class="text">Salereport</span>
                    </a>
                </li>
            </ul>
        </nav>
    </aside>
    <!-- Main Content -->
    <main class="main-wrap">
        <!-- Your dashboard content can go here -->
        <section class="content-main">
            <div class="content-header">
                <div>
                    <h2 class="content-title card-title">Coupon</h2>
                </div>
            </div>
   

<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCouponModal" id="openCreateCouponModalBtn">Create Coupon</button>
    

<table id="couponTable" class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Minimum Amount</th>
            <th>Maximum Amount</th>
            <th>Coupon Code</th>
            <th>Status</th>
            <th>Action</th>
            <th>delete</th>
        </tr>
    </thead>
    <tbody id="couponTableBody">
        <!-- Coupons will be dynamically added here -->
    </tbody>
</table>


<!-- Modal for creating coupons -->
<div class="modal fade" id="createCouponModal" tabindex="-1" role="dialog" aria-labelledby="createCouponModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="createCouponModalLabel">Create Coupon</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="createCouponForm">
            <div class="form-group">
              <label for="couponName">Name</label>
              <input type="text" class="form-control" id="couponName" required>
              <div class="invalid-feedback">Please enter the coupon name.</div>
            </div>
            <div class="form-group">
              <label for="startDate">Start Date</label>
              <input type="date" class="form-control" id="startDate" required>
              <div class="invalid-feedback">Please select the start date.</div>
            </div>
            <div class="form-group">
              <label for="endDate">End Date</label>
              <input type="date" class="form-control" id="endDate" required>
              <div class="invalid-feedback">Please select the end date.</div>
            </div>
            <div class="form-group">
              <label for="minimumAmount">Minimum Amount</label>
              <input type="text" class="form-control" id="minimumAmount" required>
              <div class="invalid-feedback">Please enter a valid positive number for the minimum amount.</div>
            </div>
            <div class="form-group">
              <label for="maximumAmount">Maximum Amount</label>
              <input type="text" class="form-control" id="maximumAmount" required>
              <div class="invalid-feedback">Please enter a valid positive number for the maximum amount.</div>
            </div>
            <div class="form-group">
              <label for="couponCode">Coupon Code</label>
              <input type="text" class="form-control" id="couponCode" required>
              <div class="invalid-feedback">Please enter the coupon code.</div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="createCouponBtn">Create</button>
        </div>
      </div>
    </div>
  </div>

<!-- Modal for updating coupons -->
<div class="modal fade" id="updateCouponModal" tabindex="-1" role="dialog" aria-labelledby="updateCouponModalLabel" aria-hidden="true" data-coupon-id="">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateCouponModalLabel">Update Coupon</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="updateCouponForm">
                    <div class="form-group">
                        <input type="hidden" id="couponid">
                        <label for="updateCouponName">Coupon Name</label>
                        <input type="text" class="form-control" id="updateCouponName" required>
                    </div>
                    <div class="form-group">
                        <label for="updateStartDate">Start Date</label>
                        <input type="date" class="form-control" id="updateStartDate" required>
                    </div>
                    <div class="form-group">
                        <label for="updateEndDate">End Date</label>
                        <input type="date" class="form-control" id="updateEndDate" required>
                    </div>
                    <div class="form-group">
                        <label for="updateMinimumAmount">Minimum Amount</label>
                        <input type="number" class="form-control" id="updateMinimumAmount" required>
                    </div>
                    <div class="form-group">
                        <label for="updateMaximumAmount">Maximum Amount</label>
                        <input type="number" class="form-control" id="updateMaximumAmount" required>
                    </div>
                    <div class="form-group">
                        <label for="updateCouponCode">Coupon Code</label>
                        <input type="text" class="form-control" id="updateCouponCode" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateCouponBtn" data-coupon-id="">Update</button>
            </div>
        </div>
    </div>
</div>




        </section>
    </main>
    <!-- Footer -->
    <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
            <div class="col-sm-6">
                <script>
                    document.write(new Date().getFullYear())
                </script> ©, Evara - HTML Ecommerce Template .
            </div>
            <div class="col-sm-6">
                <div class="text-sm-end">
                    All rights reserved
                </div>
            </div>
        </div>
    </footer>
    <!-- JavaScript Imports -->
    <script src="/admin_assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/admin_assets/js/vendors/bootstrap.bundle.min.js"></script>
    <!-- Add more JavaScript imports if needed -->
    <!-- Main Script -->
    <script src="/admin_assets/js/main.js" type="text/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        // Function to highlight clicked sidebar item
        function highlightMenuItem(item) {
            // Remove 'active' class from all menu items
            var menuItems = document.querySelectorAll('.menu-aside .menu-item');
            menuItems.forEach(function(menuItem) {
                menuItem.classList.remove('active');
            });

            // Add 'active' class to the clicked menu item
            item.parentNode.classList.add('active');
        }
    </script>





<script>
    function displayCoupons() {
    fetch('/admin/get-coupons')
        .then(response => response.json())
        .then(data => {
            const couponTableBody = document.getElementById('couponTableBody');
            couponTableBody.innerHTML = '';

            if (data.length === 0) {
                couponTableBody.innerHTML = '<tr><td colspan="9">Coupon is empty</td></tr>';
            } else {
                data.forEach(coupon => {
                    const row = `
                        <tr>
                            <td>${coupon.name}</td>
                            <td>${new Date(coupon.startDate).toLocaleDateString()}</td>
                            <td>${new Date(coupon.endDate).toLocaleDateString()}</td>
                            <td>${coupon.minimumAmount}</td>
                            <td>${coupon.maximumAmount}</td>
                            <td>${coupon.couponCode}</td>
                            <td>${coupon.status}</td>
                            <td>
                                <button class="btn btn-sm btn-primary update-btn" data-coupon-id="${coupon._id}" data-bs-toggle="modal" data-bs-target="#updateCouponModal">Update</button>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-danger delete-btn" data-coupon-id="${coupon._id}">Delete</button>
                            </td>
                        </tr>
                    `;
                    couponTableBody.innerHTML += row;
                });
            }
        })
        .catch(error => {
            console.error('Error fetching coupons:', error);
        });
}

const showError = (input, message) => {
    const formGroup = input.parentElement;
    formGroup.classList.add('has-error');
    const invalidFeedback = formGroup.querySelector('.invalid-feedback');
    invalidFeedback.textContent = message;
    input.classList.add('is-invalid');
};

const clearErrors = () => {
    const formGroups = createCouponForm.querySelectorAll('.form-group');
    formGroups.forEach((formGroup) => {
        formGroup.classList.remove('has-error');
        const input = formGroup.querySelector('input');
        input.classList.remove('is-invalid');
        const invalidFeedback = formGroup.querySelector('.invalid-feedback');
        invalidFeedback.textContent = '';
    });
};



document.getElementById('createCouponBtn').addEventListener('click', () => {
    const couponName = document.getElementById('couponName').value.trim();
    const startDateInput = document.getElementById('startDate');
    startDateInput.min = formatDate(new Date());
    const startDate = startDateInput.value.trim();
    const endDateInput = document.getElementById('endDate');
    endDateInput.min = formatDate(new Date());
    const endDate = endDateInput.value.trim();
    const minimumAmount = document.getElementById('minimumAmount').value.trim();
    const maximumAmount = document.getElementById('maximumAmount').value.trim();
    const couponCode = document.getElementById('couponCode').value.trim();

    let isValid = true;

    if (couponName === '') {
        showError(document.getElementById('couponName'), 'Please enter the coupon name.');
        isValid = false;
    }

    if (startDate === '') {
        showError(startDateInput, 'Please select the start date.');
        isValid = false;
    }

    if (endDate === '') {
        showError(endDateInput, 'Please select the end date.');
        isValid = false;
    }

    const minimumAmountValue = parseFloat(minimumAmount);
    if (isNaN(minimumAmountValue) || minimumAmountValue <= 0 || !/^\d+$/.test(minimumAmount)) {
        showError(document.getElementById('minimumAmount'), 'Please enter a valid positive number for the minimum amount.');
        isValid = false;
    }

    const maximumAmountValue = parseFloat(maximumAmount);
    if (isNaN(maximumAmountValue) || maximumAmountValue <= 0 || !/^\d+$/.test(maximumAmount)) {
        showError(document.getElementById('maximumAmount'), 'Please enter a valid positive number for the maximum amount.');
        isValid = false;
    }

    if (couponCode === '') {
        showError(document.getElementById('couponCode'), 'Please enter the coupon code.');
        isValid = false;
    }

    if (!isValid) {
        return;
    }

    const couponData = {
        name: couponName,
        startDate: startDate,
        endDate: endDate,
        minimumAmount: minimumAmount,
        maximumAmount: maximumAmount,
        couponCode: couponCode
    };

    fetch('/admin/create-coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(couponData)
    })
    .then(response => response.json())
    .then(data => {
        console.log(data,'jillgood')
        if (data.message === 'Coupon created successfully') {
            Swal.fire({
                icon: 'success',
                title: 'Coupon Created',
                text: data.message,
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Coupon is not added',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload();
            });
        }
    })
    .catch(error => {
        console.error('Error creating coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while creating the coupon',
            confirmButtonText: 'OK'
        });
    });
});

document.addEventListener('click', (event) => {
    if (event.target.classList.contains('update-btn')) {
        const couponId = event.target.dataset.couponId;
        fetchCouponDetails(couponId);
    }

    if (event.target.classList.contains('delete-btn')) {
        const couponId = event.target.dataset.couponId;
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to delete this coupon',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/admin/delete-coupon/${couponId}`, {
                    method: 'DELETE'
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data,'hello world delete')
                    if (data.message = 'Coupon deleted successfully' ) {
                        Swal.fire(
                            'Deleted!',
                            data.message,
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire(
                            'Error',
                            data.message,
                            'error'
                        ).then(() => {
                            location.reload();
                        });
                    }
                })
                .catch(error => {
                    console.error('Error deleting coupon:', error);
                    Swal.fire(
                        'Error',
                        'An error occurred while deleting the coupon',
                        'error'
                    );
                });
            }
        });
    }
});

function fetchCouponDetails(couponId) {
    fetch(`/admin/get-coupon/${couponId}`)
        .then(response => response.json())
        .then(data => {
            if (data) {
                // Set coupon details in the modal
                document.getElementById('couponid').value = data._id;
                document.getElementById('updateCouponName').value = data.name;
                document.getElementById('updateStartDate').value = formatDate(data.startDate);
                document.getElementById('updateStartDate').min = formatDate(new Date());
                document.getElementById('updateEndDate').value = formatDate(data.endDate);
                document.getElementById('updateEndDate').min = formatDate(new Date());
                document.getElementById('updateMinimumAmount').value = data.minimumAmount;
                document.getElementById('updateMaximumAmount').value = data.maximumAmount;
                document.getElementById('updateCouponCode').value = data.couponCode;
                $('#updateCouponModal').modal('show');
            } else {
    console.error('Coupon not found');
}
})
.catch(error => {
    console.error('Error fetching coupon details:', error);
});
}

function formatDate(dateString) {
const date = new Date(dateString);
const year = date.getFullYear();
const month = (date.getMonth() + 1).toString().padStart(2, '0');
const day = date.getDate().toString().padStart(2, '0');
return `${year}-${month}-${day}`;
}

document.getElementById('updateCouponBtn').addEventListener('click', () => {
const couponId = document.getElementById('couponid').value;
const couponName = document.getElementById('updateCouponName').value.trim();
const startDate = document.getElementById('updateStartDate').value.trim();
const endDate = document.getElementById('updateEndDate').value.trim();
const minimumAmount = document.getElementById('updateMinimumAmount').value.trim();
const maximumAmount = document.getElementById('updateMaximumAmount').value.trim();
const couponCode = document.getElementById('updateCouponCode').value.trim();

let isValid = true;

if (couponName === '') {
    showError(document.getElementById('updateCouponName'), 'Please enter the coupon name.');
    isValid = false;
}

if (startDate === '') {
    showError(document.getElementById('updateStartDate'), 'Please select the start date.');
    isValid = false;
}

if (endDate === '') {
    showError(document.getElementById('updateEndDate'), 'Please select the end date.');
    isValid = false;
}

const minimumAmountValue = parseFloat(minimumAmount);
if (isNaN(minimumAmountValue) || minimumAmountValue <= 0 || !/^\d+$/.test(minimumAmount)) {
    showError(document.getElementById('updateMinimumAmount'), 'Please enter a valid positive number for the minimum amount.');
    isValid = false;
}

const maximumAmountValue = parseFloat(maximumAmount);
if (isNaN(maximumAmountValue) || maximumAmountValue <= 0 || !/^\d+$/.test(maximumAmount)) {
    showError(document.getElementById('updateMaximumAmount'), 'Please enter a valid positive number for the maximum amount.');
    isValid = false;
}

if (couponCode === '') {
    showError(document.getElementById('updateCouponCode'), 'Please enter the coupon code.');
    isValid = false;
}

if (!isValid) {
    return;
}

const updatedCouponData = {
    name: couponName,
    startDate: startDate,
    endDate: endDate,
    minimumAmount: minimumAmount,
    maximumAmount: maximumAmount,
    couponCode: couponCode
};

fetch(`/admin/update-coupon/${couponId}`, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(updatedCouponData)
})
.then(response => response.json())
.then(data => {
    if (data.message = 'Coupon updated successfully') {
        Swal.fire({
            icon: 'success',
            title: 'Coupon Updated',
            text: data.message,
            confirmButtonText: 'OK'
        }).then(() => {
            location.reload();
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update the coupon',
            confirmButtonText: 'OK'
        });
    }
})
.catch(error => {
    console.error('Error updating coupon:', error);
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while updating the coupon',
        confirmButtonText: 'OK'
    });
});
});

displayCoupons();
</script>
 
</body>

</html>