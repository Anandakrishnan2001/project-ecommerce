<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <!-- Include your CSS here -->
  <style>
    /* Add your custom styles here */
    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
    }
    .btn-danger:hover {
      background-color: #c82333;
      border-color: #bd2130;
    }
  </style>
</head>
<body>
  <%- include("../partials/userheader") %>
  <main class="main">
      <div class="page-header breadcrumb-wrap">
          <div class="container">
              <div class="breadcrumb">
                  <a href="index.html" rel="nofollow">Home</a>
                  <span></span> Shop
                  <span></span> Orderdetails
              </div>
          </div>
      </div>
      <section class="mt-50 mb-50">
        <div class="container">
          <div class="row">
            <div class="col-12">
              <div class="table-responsive">
                <table class="table shopping-summery text-center">
                  <thead>
                    <tr class="main-heading">
                      <th scope="col">Order Date:</th>
                      <th scope="col">Order PaymentMethod:</th>
                      <th scope="col">Payment status:</th>
                      <th scope="col">Address:</th>
                      <th scope="col">Product Status:</th>
                      <th scope="col">Items:</th>
                      <th scope="col">Item Name:</th>
                      <th scope="col">Item Quantity:</th>
                      <th scope="col">Item price:</th>
                      <th scope="col">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (Array.isArray(orders) && orders.length > 0) { %>
                      <% orders.forEach(order => { %>
                        <% if (order.items.length === 1) { %>
                          <tr>
                            <td><%= order.orderDate.toDateString() %></td>
                            <td><%= order.paymentMethod %></td>
                            <td><%= order.paymentStatus %></td>
                            <td>
                              <% if (order.shippingAddress) { %>
                                <% let address = Object.values(order.shippingAddress).join(', '); %>
                                <%= address %>
                              <% } %>
                            </td>
                            <td><%= order.items[0].Status %></td>
                            <td><img src="/productimages/<%= order.items[0].image[0] %>" alt="<%= order.items[0].title %>" class="mr-2" style="max-height: 80px;"></td>
                            <td><%= order.items[0].title %></td>
                            <td><%= order.items[0].quantity %></td>
                            <td><%= order.items[0].price %></td>
                            <td>
                              <% if (order.orderStatus === 'Delivered') { %>
                                <button class="btn btn-warning btn-sm returnProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= order.items[0]._id %>">Return</button>
                              <% } else if (order.paymentStatus ===  'Failed') { %>
                                <button class="btn btn-success btn-sm retryBtn" data-order-id="<%= order._id %>" data-item-id="<%= order.items[0]._id %>">Retry</button>
                              <% } else if (order.paymentMethod !== 'razorpay' && order.paymentStatus !== 'Failed' && order.items[0].Status !== 'Cancelled') { %>
                                <button class="btn btn-danger btn-sm removeProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= order.items[0]._id %>">Remove</button>
                              <% } %>
                            </td>
                          </tr>
                        <% } else { %>
                          <% order.items.forEach(item => { %>
                            <tr>
                              <td><%= order.orderDate.toDateString() %></td>
                              <td><%= order.paymentMethod %></td>
                              <td><%= order.paymentStatus %></td>
                              <td>
                                <% if (order.shippingAddress) { %>
                                  <% let address = Object.values(order.shippingAddress).join(', '); %>
                                  <%= address %>
                                <% } %>
                              </td>
                              <td><%= item.Status %></td>
                              <td><img src="/productimages/<%= item.image[0] %>" alt="<%= item.title %>" class="mr-2" style="max-height: 80px;"></td>
                              <td><%= item.title %></td>
                              <td><%= item.quantity %></td>
                              <td><%= item.price %></td>
                              <td>
                                <% if (order.orderStatus === 'Delivered') { %>
                                  <button class="btn btn-warning btn-sm returnProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Return</button>
                                <% } else if ( order.paymentStatus === 'Failed') { %>
                                  <button class="btn btn-success btn-sm retryBtn" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Retry</button>
                                <% } else if (order.paymentMethod !== 'razorpay' && order.paymentStatus !== 'Failed' && item.Status !== 'Cancelled') { %>
                                  <button class="btn btn-danger btn-sm removeProductBtn" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Remove</button>
                                <% } %>
                              </td>
                            </tr>
                          <% }); %>
                        <% } %>
                      <% }); %>
                      <% const hasCancelledItem = orders.some(order => order.items.some(item => item.Status === 'Cancelled')); %>
                      <% const totalAmount = orders.reduce((sum, order) => sum + order.billTotal, 0); %>
                      <% const couponDiscount = orders.reduce((sum, order) => sum + (order.couponDiscount || 0), 0); %>
                      <% const finalAmount = totalAmount - couponDiscount; %>
                      <% if (hasCancelledItem) { %>
                        <tr>
                          <td colspan="10">
                            <div class="card">
                              <div class="card-body">
                                <h5 class="card-title">Order Summary</h5>
                                <ul class="list-group list-group-flush">
                                  <li class="list-group-item">Total Amount: <strong><%= totalAmount %></strong></li>
                                  <% if (couponDiscount > 0) { %>
                                    <li class="list-group-item">Coupon Discount: <strong><%= couponDiscount %></strong></li>
                                  <% } %><li class="list-group-item">Order Status: <strong><%= orders[0].orderStatus %></strong></li>
                                  <% if (hasCancelledItem) { %>
                                    <li class="list-group-item">Note: Invoice cannot be downloaded due to cancelled item(s).</li>
                                  <% } %>
                                  </ul>
                                  </div>
                                  </div>
                                  </td>
                                  </tr> 
                                  <% } else { %>
                                  <tr>
                                    <td colspan="10">
                                      <div class="card">
                                        <div class="card-body">
                                          <h5 class="card-title">Order Summary</h5>
                                          <ul class="list-group list-group-flush">
                                            <li class="list-group-item">Total Amount: <strong><%= totalAmount %></strong></li>
                                            <% if (couponDiscount > 0) { %>
                                              <li class="list-group-item">Coupon Discount: <strong><%= couponDiscount %></strong></li>
                                            <% } %>
                                            <li class="list-group-item">Final Amount: <strong><%= finalAmount %></strong></li>
                                            <li class="list-group-item">Order Status: <strong><%= orders[0].orderStatus %></strong></li>
                                            <% if (hasCancelledItem) { %>
                                              <li class="list-group-item">Note: Invoice cannot be downloaded due to cancelled item(s).</li>
                                            <% } else { %>
                                              <button type="button" class="btn btn-primary" id="downloadInvoiceBtn">Download Invoice</button>
                                            <% } %>
                                          </ul>
                                        </div>
                                      </div>
                                    </td>
                                  </tr>
                                  <% } %>
                                  <% } else { %>
                                  <tr>
                                    <td colspan="9">No orders found.</td>
                                  </tr>
                                  <% } %>
                                  </tbody>
                                  </table>
                                  </div>
                                  </div>
                                  </div>
                                  </div>
                                  </section>
                                  
                                  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                                  <script>
                                    const returnProduct = async (orderId, productId) => {
                                      console.log(orderId,productId,'jillfieelddiee sdfsdfs')
                                      const { value: returnReason } = await Swal.fire({
                                        title: 'Return Product',
                                        input: 'textarea',
                                        inputPlaceholder: 'Enter the reason for return...',
                                        inputAttributes: {
                                          'aria-label': 'Type your return reason here'
                                        },
                                        showCancelButton: true,
                                        confirmButtonText: 'Return Product',
                                        cancelButtonText: 'Cancel',
                                        allowOutsideClick: false,
                                        inputValidator: (value) => {
                                          if (!value) {
                                            return 'Please enter a reason for return';
                                          }
                                        }
                                      });
                                  
                                      if (returnReason) {
                                        try {
                                          const response = await fetch(`/return-product/${orderId}/${productId}`, {
                                            method: 'POST',
                                            headers: {
                                              'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({ returnReason }),
                                          });
                                          if (!response.ok) {
                                            throw new Error('Failed to return product');
                                          }
                                          const data = await response.json();
                                          if (data.success) {
                                            Swal.fire('Success', data.message, 'success');
                                            location.reload(true);
                                          } else {
                                            Swal.fire('Error', data.error, 'error');
                                          }
                                        } catch (error) {
                                          Swal.fire('Error', 'Error returning product: ' + error.message);
                                        }
                                      }
                                    };
                                  
                                    const removeProduct = async (orderId, productId) => {
                                      const { value: cancelReason } = await Swal.fire({
                                        title: 'Cancel Order',
                                        input: 'textarea',
                                        inputPlaceholder: 'Enter the reason for cancellation...',
                                        inputAttributes: {
                                          'aria-label': 'Type your cancel reason here'
                                        },
                                        showCancelButton: true,
                                        confirmButtonText: 'Cancel Order',
                                        cancelButtonText: 'Cancel',
                                        allowOutsideClick: false,
                                        inputValidator: (value) => {
                                          if (!value) {
                                            return 'Please enter a reason for cancellation';
                                          }
                                        }
                                      });
                                  
                                      if (cancelReason) {
                                        try {
                                          const response = await fetch(`/cancel-product/${orderId}/${productId}`, {
                                            method: 'POST',
                                            headers: {
                                              'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({ cancelReason }),
                                          });
                                          if (!response.ok) {
                                            throw new Error('Failed to cancel product');
                                          }
                                          const data = await response.json();
                                          if (data.success) {
                                            Swal.fire('Success', data.message, 'success');
                                            location.reload(true);
                                          } else {
                                            Swal.fire('Error', data.error, 'error');
                                          }
                                        } catch (error) {
                                          Swal.fire('Error', 'Error cancelling product: ' + error.message);
                                        }
                                      }
                                    };
                                  
                                    const retryPayment = async (orderId, productId) => {
                                      try {
                                        const response = await fetch(`/retry-payment/${orderId}/${productId}`, {
                                          method: 'POST',
                                          headers: {
                                            'Content-Type': 'application/json',
                                          },
                                        });
                                        if (!response.ok) {
                                          throw new Error('Failed to retry payment');
                                        }
                                        const data = await response.json();
                                        if (data.success) {
                                          Swal.fire('Success', data.message, 'success');
                                          location.reload(true);
                                        } else {
                                          Swal.fire('Error', data.error, 'error');
                                        }
                                      } catch (error) {
                                        Swal.fire('Error', 'Error retrying payment: ' + error.message);
                                      }
                                    };
                                  
                                    document.querySelectorAll('.returnProductBtn').forEach((btn) => {
                                      btn.addEventListener('click', async (event) => {
                                        event.preventDefault();
                                        const orderId = btn.dataset.orderId;
                                        const productId = btn.dataset.itemId;
                                         await returnProduct(orderId, productId);
                                          
                                        })
                                      });
                                 ;
                                  
                                    document.querySelectorAll('.removeProductBtn').forEach((btn) => {
                                      btn.addEventListener('click', async (event) => {
                                        event.preventDefault();
                                        const orderId = btn.dataset.orderId;
                                        const productId = btn.dataset.itemId;
                                        await removeProduct(orderId, productId);
                                      });
                                    });
                                  
                                    document.querySelectorAll('.retryBtn').forEach((btn) => {
                                      btn.addEventListener('click', async (event) => {
                                        event.preventDefault();
                                        const orderId = btn.dataset.orderId;
                                        const productId = btn.dataset.itemId;
                                        await retryPayment(orderId, productId);
                                      });
                                    });
                                  </script>
                                  <%- include("../partials/userfooter") %>
                                  </body>
                                  </html>